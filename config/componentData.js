module.exports = [{"name":"HelloWorld","description":"A super lame component that says hello","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n/**\n * A super lame component that says hello\n */\nfunction HelloWorld({ message }) {\n  return (\n    <div>\n      Hello {message}\n    </div>\n  );\n}\n\nHelloWorld.propTypes = {\n  /**\n   * Message to display\n   */\n  message: PropTypes.string,\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;\n","examples":[{"name":"ExampleHelloWorld","description":"Custom example message","code":"import React from 'react';\nimport HelloWorld from 'my-components/HelloWorld';\n\n/**\n * Custom example message\n */\nfunction ExampleHelloWorld() {\n  return (<HelloWorld message=\"say hello\" />)\n}\n\nexport default ExampleHelloWorld;\n"}]},{"name":"Label","description":"","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"is required"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Label extends React.Component {\n\n  static propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text*/\n    label: PropTypes.string.isRequired,\n\n    /** is required */\n    required: PropTypes.bool,\n  }\n\n  render() {\n    const { htmlFor, label, required } = this.props;\n    return (\n      <label style={{ display: 'block' }} htmlFor={htmlFor}>\n        {label} {required && (<span style={{ color: 'red' }}> *</span>)}\n      </label>\n    );\n  }\n\n}\n\nexport default Label;","examples":[{"name":"ExampleOptionalLabel","description":"","code":"import React from 'react';\nimport Label from 'my-components/Label';\n\nexport default () => {\n  return (\n    <Label htmlFor=\"test\" label=\"test\" />\n  )\n}\n"},{"name":"ExampleRequiredLabel","description":"","code":"import React from 'react';\nimport Label from 'my-components/Label';\n\nexport default () => {\n  return (\n    <Label\n      htmlFor=\"test\"\n      label=\"required\"\n      required\n    />\n  )\n}"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":""},"width":{"type":{"name":"number"},"required":true,"description":""},"height":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n\n  static propTypes = {\n    percent: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number,\n  }\n\n  static defaultProps = {\n    height: 5\n  };\n\n  getColor = (percent) => {\n    if (this.props.percent === 100) {\n      return 'green';\n    }\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: 'solid 1px lightgrey', width }}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }}>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProgressBar;\n","examples":[{"name":"Example10Percent","description":"10 percent progress bar","code":"import React from 'react';\nimport ProgressBar from 'my-components/ProgressBar';\n\n/**\n * 10 percent progress bar\n */\nfunction ExampleProgressBar10Percent() {\n  return (<ProgressBar percent={10} width={100} />)\n}\n\nexport default ExampleProgressBar10Percent;\n"},{"name":"Example70Percent","description":"10 percent progress bar","code":"import React from 'react';\nimport ProgressBar from 'my-components/ProgressBar';\n\n/**\n * 10 percent progress bar\n */\nfunction ExampleProgressBar70Percent() {\n  return (<ProgressBar percent={70} width={100} />)\n}\n\nexport default ExampleProgressBar70Percent;\n"}]},{"name":"RegistrationForm","description":"","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'thanks for registering'","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":""},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInputCSSModule';\n\nclass RegistrationForm extends React.Component {\n\n  static propTypes = {\n    confirmationMessage: PropTypes.string,\n    onSubmit: PropTypes.func.isRequired,\n    minPasswordLength: PropTypes.number\n  }\n\n  static defaultProps = {\n    confirmationMessage: 'thanks for registering',\n    minPasswordLength: 0\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  }\n\n  passwordQuality(password) {\n    if (!password) {\n      return null;\n    }\n    if (password.length >= this.props.minPasswordLength) {\n      return 100;\n    }\n    return 0;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) {\n      errors.email = 'Email required';\n    }\n    if (password.length < minPasswordLength) {\n      errors.password = `Password must be at least ${minPasswordLength}`;\n    }\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  }\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return (\n      submitted ?\n        (<h2>{this.props.confirmationMessage}</h2>)\n        : (\n          <div>\n            <TextInput\n              htmlID=\"registration-form-email\"\n              name=\"email\"\n              onChange={this.onChange}\n              label=\"Email\"\n              value={email}\n              error={errors.email}\n              required\n            />\n\n            <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n          </div>\n        )\n    );\n  }\n}\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from 'react';\nimport RegistrationForm from 'my-components/RegistrationForm';\n\nclass ExampleRegistrationForm extends React.Component {\n\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return (\n      <RegistrationForm\n        onSubmit={this.onSubmit}\n      />\n    );\n\n  }\n\n}\n\nexport default ExampleRegistrationForm;"}]},{"name":"TextInput","description":"","props":{"type":{"defaultValue":{"value":"\"text\"","computed":false}},"required":{"defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport cns from 'classnames';\n\nfunction TextInput({\n  htmlID,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  ...rest\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label\n        htmlFor={htmlID}\n        label={label}\n        required={required}\n      />\n      <input\n        id={htmlID}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={cns({\n          'textinput__input--state-error': error\n        })}\n        {...rest}\n      />\n      {\n        error &&\n        (\n          <div\n            className={cns({ 'textinput__error': true })}\n          >\n            {error}\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\n\nexport default TextInput;","examples":[]},{"name":"TextInputCSSModule","description":"","props":{"type":{"defaultValue":{"value":"\"text\"","computed":false}},"required":{"defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport classNames from 'classnames/bind';\nimport styles from './style.css';\nconst cx = classNames.bind(styles);\n\nfunction TextInput({\n  htmlID,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  ...rest\n}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label\n        htmlFor={htmlID}\n        label={label}\n        required={required}\n      />\n      <input\n        id={htmlID}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={cx({\n          inputError: error\n        })}\n        {...rest}\n      />\n      {\n        error &&\n        (\n          <div\n            className={styles.error}\n          >\n            {error}\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default TextInput;","examples":[]}]